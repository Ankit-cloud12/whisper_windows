# Windows Integration Review for WhisperApp v1.0.0

This document summarizes the Windows-specific integration aspects of WhisperApp,
based on a review of the source code.

## 1. Current Installer Capabilities (CMakeLists.txt)

The `CMakeLists.txt` file includes CPack configuration for generating a Windows installer using NSIS (Nullsoft Scriptable Install System).

Key installer features configured:
- **Generator:** NSIS is specified (`set(CPACK_GENERATOR "NSIS")`).
- **Package Information:**
    - `CPACK_PACKAGE_NAME`: "WhisperApp"
    - `CPACK_PACKAGE_VENDOR`: "WhisperApp Development Team"
    - `CPACK_PACKAGE_DESCRIPTION_SUMMARY`: "Windows Speech-to-Text Application"
    - `CPACK_PACKAGE_VERSION`: Derived from `PROJECT_VERSION`.
    - `CPACK_PACKAGE_INSTALL_DIRECTORY`: "WhisperApp"
- **NSIS Specific Settings:**
    - `CPACK_NSIS_DISPLAY_NAME`: "WhisperApp"
    - `CPACK_NSIS_PACKAGE_NAME`: "WhisperApp"
    - `CPACK_NSIS_MUI_ICON`: Uses `resources/icons/WhisperApp.ico` for the installer icon.
    - `CPACK_NSIS_MUI_UNIICON`: Uses `resources/icons/WhisperApp.ico` for the uninstaller icon.
    - `CPACK_NSIS_CREATE_ICONS_EXTRA`: Creates a desktop shortcut (`$DESKTOP\\WhisperApp.lnk`) pointing to `$INSTDIR\\bin\\WhisperApp.exe`.
    - `CPACK_NSIS_DELETE_ICONS_EXTRA`: Deletes the desktop shortcut during uninstallation.
- **Installation Content:**
    - The main executable (`WhisperApp.exe`) is installed into the `bin` directory within the installation path.
    - A `models` directory structure is created (initially containing a `.gitkeep` file).

The installer capabilities are basic but functional, providing an icon, desktop shortcut, and proper uninstallation of the shortcut.

## 2. Functionality of the System Tray Icon (TrayIcon.cpp/h)

The system tray icon is implemented using Qt's `QSystemTrayIcon` class.

**Key Functionality:**
- **Visibility:** The icon can be shown or hidden.
- **Icon:**
    - Displays a default "normal" icon (custom drawn microphone).
    - Changes to a "recording" icon (custom drawn red microphone with a dot) when recording.
    - The recording icon has a flashing animation (alternating between bright and normal red) controlled by a `QTimer`.
- **Tooltip:**
    - Displays "WhisperApp - Ready" when idle.
    - Displays "WhisperApp - Recording..." when recording.
- **Context Menu:** A right-click context menu is provided with the following actions:
    - "&Show Window"
    - "&Start Recording" / "&Stop Recording" (toggles based on state)
    - "&Pause Recording" (enabled only when recording)
    - "&History..."
    - "&Settings..."
    - "&About"
    - "&Help"
    - "E&xit"
- **Activation:**
    - **Single Left Click (Trigger):** Shows the main application window.
    - **Double Left Click:** Toggles recording.
    - **Middle Click:** Shows the history window.
    - **Right Click (Context):** Shows the context menu.
- **Notifications (Messages):**
    - Uses `QSystemTrayIcon::showMessage()` to display balloon notifications.
    - Notification display is conditional on the `ShowTrayNotifications` setting.
    - Supports Information, Warning, and Critical message icons.
    - Clicking a notification shows the main application window.
- **Logging:** Tray icon activities (initialization, show/hide, messages) are logged.

The `TrayIcon.h` file defines enums for `Status` (Idle, Recording, Processing, Error, Disabled) and `NotificationType` (Info, Success, Warning, Error), though the `TrayIcon.cpp` implementation primarily focuses on idle/recording states for the icon itself and uses a simpler `MessageIcon` enum for notifications.

## 3. Global Hotkeys Implementation (GlobalHotkeys.cpp/h)

The global hotkey system is designed to use Windows-specific APIs.

- **Implementation Approach:**
    - The `GlobalHotkeys.cpp` includes `<windows.h>`.
    - It mentions `RegisterHotKey` and `UnregisterHotKey` Windows API functions in comments as `TODO` items, indicating the intention to use them.
    - It defines a `nativeEventFilter` that checks for `WM_HOTKEY` messages, which is the standard way to receive global hotkey events on Windows.
    - Modifiers (Ctrl, Shift, Alt) are converted to Windows-specific flags (`MOD_CONTROL`, `MOD_SHIFT`, `MOD_ALT`).
    - Key strings are converted to Windows virtual key codes (e.g., `VK_SPACE`, `VK_RETURN`, letters, numbers, F-keys).
- **Windows-Specificity:**
    - The current implementation stubs out the actual calls to `RegisterHotKey` and `UnregisterHotKey` but is clearly designed for the Windows API. The `nativeEventFilter` and the use of `MSG*` and `WM_HOTKEY` are Windows-specific.
    - The `GlobalHotkeys.h` also includes `<windows.h>` under an `#ifdef _WIN32` guard.
    - The `toWindowsHotkey` and `fromWindowsHotkey` static methods in `GlobalHotkeys.h` further confirm the Windows-centric design for converting `QKeySequence` to/from Windows native hotkey parameters.
- **Functionality (Intended):**
    - Register and unregister hotkeys with a string ID and combination (e.g., "Ctrl+Shift+R").
    - Parse hotkey strings to identify modifiers and keys.
    - Handle hotkey events triggered by Windows and emit a `hotkeyTriggered` signal.
    - The `HotkeyInfo` struct in `GlobalHotkeys.h` includes fields for `windowsId`.

While the actual registration calls are commented out as `TODO`, the entire infrastructure is set up for Windows global hotkeys.

## 4. Direct Windows API Usage in main.cpp

A review of `main.cpp` does not show any direct, explicit Windows API calls for application setup or specific features beyond what Qt itself might use internally.
- The file includes typical Qt headers.
- It focuses on Qt application setup (`QApplication`, `QSettings`), logger initialization, theme management, splash screen, and initializing the `WhisperEngine` and `MainWindow`.
- Windows-specific preprocessor definitions like `UNICODE`, `_UNICODE`, `NOMINMAX`, `WIN32_LEAN_AND_MEAN` are present in `CMakeLists.txt` for Windows builds, which affect how Windows headers (included indirectly by Qt or other libraries) behave, but `main.cpp` itself isn't calling functions like `CreateWindowEx`, `GetMessage`, etc., directly.

The Windows-specific behavior (like WASAPI usage mentioned in `CMakeLists.txt`) is likely encapsulated within other modules (e.g., `AudioCapture.cpp` or Qt Multimedia) rather than in `main.cpp`.

## 5. Native Windows Notifications vs. Qt Notifications

The tray icon uses `QSystemTrayIcon::showMessage()`.
- `QSystemTrayIcon` is a Qt class designed to provide platform-agnostic access to system tray functionality.
- On Windows, `QSystemTrayIcon::showMessage()` typically translates to using the native Windows notification system (balloon tips or toast notifications depending on the Windows version).
- This means the application **does leverage native Windows notifications** through the Qt abstraction layer, rather than implementing a purely custom Qt-widget-based notification.

## 6. Immediate Opportunities for Enhancement

Based on this initial review:

- **Installer:**
    - **Start Menu Shortcuts:** Currently, only a desktop shortcut is created. Adding Start Menu shortcuts (e.g., in a "WhisperApp" folder) would be standard practice.
    - **Run at Startup Option:** An option in the installer (and later in the app settings) to "Run WhisperApp at system startup" would be a common feature for utility applications. This would require registry modifications (e.g., adding to `HKCU\Software\Microsoft\Windows\CurrentVersion\Run`).
    - **License Agreement Step:** Add a license agreement page to the NSIS installer.
    - **Customizable Installation Path:** Allow the user to choose the installation directory.
    - **Check for Existing Version:** Improve upgrade/uninstall logic for existing versions.
- **Tray Icon:**
    - **Processing/Error States:** The `TrayIcon.h` defines `Status::Processing` and `Status::Error`, but the `TrayIcon.cpp` doesn't seem to have distinct visual feedback (icons/tooltips) for these states beyond generic error messages. Implementing visual cues for these states would improve user feedback.
    - **Pause Action:** The "Pause Recording" action in the context menu is present but its functionality and interaction with the recording state/engine need to be fully implemented and tested.
    - **More Informative Tooltips:** Tooltips could potentially show more status information if applicable (e.g., current model, language if these become dynamic).
- **Global Hotkeys:**
    - **Complete Implementation:** The primary enhancement is to complete the `TODO` items in `GlobalHotkeys.cpp` by implementing the actual `RegisterHotKey` and `UnregisterHotKey` calls.
    - **Conflict Detection:** The header mentions `checkConflict`, but the implementation details would need to be robust, potentially warning users if a chosen hotkey is already globally registered by another application (though this is hard to do perfectly).
    - **User Interface for Hotkey Configuration:** While `SettingsDialog.cpp` likely handles this, ensuring it's robust and allows easy modification of hotkeys is crucial. The `GlobalHotkeys.h` defines `HotkeyAction` enum which suggests a more structured approach to hotkey management than just string IDs.
- **Notifications:**
    - **Actionable Notifications:** Consider if any notifications could have direct actions (e.g., a notification for a completed transcription could have a button to "Copy to Clipboard"). This might require moving beyond `QSystemTrayIcon::showMessage` to more custom notification solutions if Qt doesn't support this directly on Windows.
    - **Notification Settings:** Provide more granular control over which notifications are shown (e.g., disable success notifications but keep errors).
- **Windows Specific Features:**
    - **WASAPI Error Handling:** Given the `PLATFORM_LIBS` in `CMakeLists.txt` include many WASAPI related libraries (`mfplat`, `mfuuid`, `ksuser`, `propsys`), robust error handling and reporting for audio device issues would be important for Windows users.
    - **DPI Awareness Manifest:** `CMakeLists.txt` mentions adding a manifest for DPI awareness (`resources/WhisperApp.manifest`), but the line is commented out. Ensuring proper DPI scaling is crucial for modern Windows displays. This should be uncommented and the manifest file should be created and included.

This review provides a foundational understanding of WhisperApp's current Windows integration and areas for potential improvement.
