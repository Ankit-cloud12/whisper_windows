# Error Handling and Reporting Review

Date: $(date +%Y-%m-%d)
WhisperApp Version: 1.0.0 (based on provided source files)

## 1. Tray Icon Error/Status Handling (`TrayIcon.h`, `TrayIcon.cpp`)

**Current State:**
-   **`TrayIcon.h` Definition:**
    -   Defines an enum `TrayIcon::Status` with `Idle`, `Recording`, `Processing`, `Error`, `Disabled`.
    -   Includes an `icons` struct (`Icons { QIcon idle; QIcon recording; QIcon processing; QIcon error; QIcon disabled; }`) suggesting distinct icons are intended for these states.
    -   Has a `setStatus(Status status)` method and an `updateIcon()` slot, implying a mechanism to change the icon based on these statuses.
    -   Defines `NotificationType` including `Error` which maps to `QSystemTrayIcon::Critical`.
-   **`TrayIcon.cpp` Implementation (as provided in previous reads):**
    -   The `TrayIcon.cpp` file provided in earlier reads (which might be slightly different or older than the one strictly matching the current `TrayIcon.h`) primarily implements visual changes for `Idle` and `Recording` states via `updateRecordingState()`. This method changes the tooltip and icon (flashing for recording).
    -   It uses `createNormalIcon()` and `createRecordingIcon()`. There are no `createProcessingIcon()` or `createErrorIcon()` methods implemented in that version of the `.cpp` file.
    -   Error notifications are handled by `showMessage()` which can display a `Critical` icon. This is the primary way errors are currently surfaced to the user via the tray.
    -   There's no explicit dynamic update of the tray icon itself to a persistent "error" or "processing" icon based on application state beyond the recording flashing.

**Assessment:**
-   The design in `TrayIcon.h` anticipates distinct visual feedback for `Processing` and `Error` states.
-   The current `TrayIcon.cpp` implementation (based on what was reviewed) mainly differentiates between `Idle` and `Recording`. Other states like `Error` or `Processing` are primarily communicated through notifications rather than persistent icon changes or specific tooltips.

## 2. Centralized Error Handler

-   A dedicated, centralized `ErrorHandler` class (e.g., `ErrorHandler.h`) **does not exist** in the codebase.
-   Error handling is distributed among components.
-   **`ErrorCodes.h`** serves as a central repository for error definitions:
    -   It defines an `ErrorCode` enum with a comprehensive list of potential errors (General, Model, Audio, Transcription, File System, Network, Config, System, UI).
    -   Provides `getErrorMessage(ErrorCode)` to get a base message.
    -   Provides `getUserFriendlyError(ErrorCode, details)` to create more elaborate messages, sometimes with suggestions.
    -   Defines custom exception classes derived from `std::runtime_error` (e.g., `WhisperException`, `ModelException`, `AudioException`, `TranscriptionException`, `NetworkException`, `SystemException`), each associated with an `ErrorCode`.

## 3. Error Reporting in Core Components

-   **`WhisperEngine.cpp`:**
    -   Throws custom exceptions defined in `ErrorCodes.h` (e.g., `ModelException`, `AudioException`, `TranscriptionException`) for various error conditions (model not loaded, audio validation failed, transcription failure/cancellation).
    -   Uses `LOG_ERROR` from `Logger.h` to log detailed error messages before throwing exceptions or returning error results. Example: `LOG_ERROR("WhisperEngine", "Failed to load model: " + std::string(e.what()));`.
    -   For asynchronous operations (`transcribeAudioAsync`), errors are caught, logged, and then passed to the `on_result` callback as part of the `TranscriptionResult` (e.g., `result.text = "Error: " + std::string(e.what());`).
-   **`AudioCapture.cpp` (WASAPI):**
    -   Handles HRESULTs from Windows COM and WASAPI calls.
    -   Uses `LOG_ERROR` to log failures from these API calls with the HRESULT value. Example: `LOG_ERROR("AudioCapture", "Failed to create device enumerator: " + std::to_string(hr));`.
    -   Error handling is mostly localized; it logs errors and then typically returns `false` or an empty object. It doesn't extensively throw the custom exceptions from `ErrorCodes.h` for WASAPI failures, making it harder for callers to get structured error information beyond logs.
    -   Device disconnection is handled by invoking a `device_change_callback_`.
-   **`ModelManager.cpp`:**
    -   File system errors (e.g., creating directories, moving files) are caught (`fs::filesystem_error`) and logged to `std::cerr` or passed to the `completion_callback`.
    -   Network errors from `QNetworkReply` are captured and passed to the `completion_callback` as string messages.
    -   Model verification failures (e.g., size mismatch, whisper.cpp load failure) are logged to `std::cout` or `std::cerr`.
    -   It doesn't consistently use the `Logger` for its own error messages (uses `std::cout`/`std::cerr`) nor does it throw the custom exceptions from `ErrorCodes.h`. Error reporting is primarily through the `CompletionCallback(bool success, const std::string& error_message)`.

## 4. Logging Detail (`Logger.cpp`)

-   The `Logger` is quite comprehensive.
-   **Log Format:** `formatLogEntry` includes:
    -   Timestamp (configurable `config.includeTimestamp`).
    -   Log level (`DEBUG`, `INFO`, `WARN`, `ERROR`, `FATAL`).
    -   Thread ID (configurable `config.includeThreadId`).
    -   Module name (configurable `config.includeModule`).
    -   The message itself.
-   **Error Logging:** `LOG_ERROR(module, message)` macro/function (from `Logger.h`, not shown but assumed) correctly logs messages with `ERROR` severity.
-   **Context:** The module name provides good context. Messages logged from `WhisperEngine` often include the specific exception details (`e.what()`).
-   **Async Logging:** Supports asynchronous logging to a queue, which is good for performance.
-   **File Rotation & Console Colors:** Includes features like log file rotation and colored console output based on severity.

**Assessment of Logging:**
-   Logging for errors is generally good when `LOG_ERROR` is used, providing timestamp, level, module, and message.
-   `WhisperEngine` makes good use of it.
-   `AudioCapture` also uses it for WASAPI errors.
-   `ModelManager` is less consistent, sometimes using `std::cout`/`std::cerr` instead of the application's logger.

## 5. Suggestions for Improvement

### 5.1. Tray Icon Feedback for Error/Processing States

-   **Implement Distinct Icons:**
    -   Create and use specific icons for `Processing`, `Error`, and `Disabled` states in `TrayIcon.cpp`, aligning with the `icons` struct in `TrayIcon.h`.
        -   **Processing Icon:** An animated icon (e.g., spinner, hourglass, or the current microphone icon with a subtle animation like pulsing dots) would be effective.
        -   **Error Icon:** A static icon clearly indicating an error (e.g., microphone with a red 'X' or warning symbol).
        -   **Disabled Icon:** A grayed-out version of the normal icon.
    -   The `TrayIcon::updateIcon()` slot (declared in `TrayIcon.h`) should be implemented to switch between these icons based on `current_status`.
-   **Update Tooltips Dynamically:**
    -   When `current_status` is `Processing`: `setToolTip(tr("WhisperApp - Processing audio..."));`
    -   When `current_status` is `Error`: `setToolTip(tr("WhisperApp - Error occurred. Click for details."));` (or a summary of the error).
    -   When `current_status` is `Disabled`: `setToolTip(tr("WhisperApp - Disabled (e.g., no microphone)."));`
-   **Persistent Error State:** If a critical error occurs that prevents normal operation (e.g., model failed to load, no audio device), the tray icon should remain in the `Error` state until the issue is resolved or acknowledged.

### 5.2. Making Error Messages More User-Friendly / Actionable

-   **Centralize Error Presentation:** When an error occurs in a core component, it should ideally propagate upwards as a structured error (e.g., an `ErrorCode` or exception). The UI layer (e.g., `MainWindow` or a dedicated error handling service) should then be responsible for:
    1.  Logging the detailed technical error.
    2.  Translating the `ErrorCode` into a user-friendly message using `ErrorCodes::getUserFriendlyError()`.
    3.  Displaying this message to the user (e.g., via `QMessageBox`, a status bar update, or a tray notification).
    4.  Updating the `TrayIcon` status to `Error` if the error is persistent.
-   **Improve `AudioCapture` Error Propagation:**
    -   Instead of just logging WASAPI errors and returning `false`, `AudioCapture` could throw specific `AudioException`s (e.g., `AudioException(ErrorCode::SystemResourceUnavailable, "WASAPI Error: " + std::to_string(hr))`). This would allow calling code to handle audio system failures more gracefully and inform the user better.
-   **Standardize `ModelManager` Error Reporting:**
    -   Refactor `ModelManager` to use the application's `Logger` (`LOG_ERROR`, `LOG_WARN`) instead of `std::cout`/`std::cerr`.
    -   For operations like `downloadModel`, the `CompletionCallback` is good, but the error string could be made more consistent or even pass an `ErrorCode` if applicable (e.g., `ErrorCode::NetworkConnectionFailed`, `ErrorCode::DiskSpaceInsufficient`).
-   **Actionable Notifications:**
    -   When an error notification is shown by `TrayIcon`, if the error is something the user can act upon (e.g., model not found, disk space full), the notification text (derived from `getUserFriendlyError`) should guide them. Clicking the notification should ideally open the relevant part of the application (e.g., settings, model manager).

### 5.3. Opportunities to Improve Logging of Errors

-   **Consistent Logging in `ModelManager`:** Ensure all error paths in `ModelManager` log via `Logger::getInstance().log(LogLevel::Error, "ModelManager", ...)` for consistency and to benefit from features like file logging and timestamps.
-   **Contextual Information:** When logging errors, especially from exceptions, ensure as much context as possible is included. For example, if a file operation fails, log the file path. If a network operation fails, log the URL.
    -   `WhisperEngine` already does this well by logging `e.what()`.
-   **User Action Logging for Errors:** When an error leads to a user-facing message, log the fact that the error was shown to the user, and what the user-facing message was. This helps in understanding if users are seeing the errors.
-   **Stack Traces (Advanced):** For critical or unexpected errors, consider integrating a lightweight stack trace logging mechanism, especially for debug builds. This can be platform-specific.
-   **Error Aggregation/Throttling:** For frequently occurring errors (e.g., continuous network timeouts), consider a mechanism to prevent log flooding. This is an advanced feature but can be useful. (The current logger queue size limit of 10000 is a basic form of this for async logging).

By implementing these suggestions, WhisperApp can provide clearer feedback to users about its status and any issues, and developers will have more robust information for debugging.
